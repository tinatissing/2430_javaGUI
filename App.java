/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eStoreSearch;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class App extends JFrame implements ActionListener {

	//everything that needs to be accessed in other subclasses to manipulate the frame accordingly

	private JLabel intro = new JLabel();
	private JPanel addFormat = new JPanel( new GridLayout( 1, 2 ) );
	private JPanel searchFormat = new JPanel( new GridLayout( 1, 2 ) );
	//private JPanel addPanel = new JPanel( new GridLayout( 8, 1 ) );
	private JPanel addPanel = new JPanel( new FlowLayout( FlowLayout.LEFT ) );
	private JPanel searchPanel = new JPanel( new GridLayout( 6, 1 ) );
	private JPanel bookPanel = new JPanel( new GridLayout( 2, 1 ) );
	private JPanel elecPanel = new JPanel( new GridLayout() );
	private JPanel addRs = new JPanel( new GridLayout( 2, 1 ) );
	private JPanel searchRs = new JPanel( new GridLayout( 2, 1 ) );

	private JTextArea errorMes = new JTextArea( 10, 50 );
	private JTextArea result = new JTextArea( 10, 50 );
	private ArrayList<JTextField> fieldList = new ArrayList<JTextField>();
	private ArrayList<JTextField> searchList = new ArrayList<JTextField>();

	protected ArrayList<Product> product = new ArrayList<>();
	private ArrayList<Integer> index = new ArrayList<>();
	private HashMap<String, ArrayList<Integer>> hm = new HashMap<String, ArrayList<Integer>>();

	private boolean isBook = true;

	public App() {
		//name the gui
		super( "eStoreSearch" );
		String[] typeVal = { "Book", "Electronics" };
		setSize( 300, 200 );
		addFormat.setSize( 300, 200 );
		searchFormat.setSize( 300, 200 );
		setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
		setLayout( new BorderLayout() );	

		//create menu
		JMenu menu = new JMenu( "Commands" );

		//menu items
		JMenuItem add = new JMenuItem( "Add" );
		add.addActionListener( this );
		menu.add( add );

		JMenuItem search = new JMenuItem( "Search" );
		search.addActionListener( this );
		menu.add( search );

		JMenuItem exit = new JMenuItem( "Exit" );
		exit.addActionListener( this );
		menu.add( exit );

		JMenuBar bar = new JMenuBar();
		bar.add( menu );
		setJMenuBar( bar );
		
		intro = new JLabel( "<html>Welcome to eStoreSearch <br/><br/> Choose a command from the 'Commands' menu above for adding a product, searching products, or quitting the program.</html>", SwingConstants.CENTER );
	
		//add intro to the frame in the center
		getContentPane().add( BorderLayout.CENTER, intro );
	
		//seperate panels for the add and search pages
		JLabel header = new JLabel( "Adding a product" );
		JLabel searchHead = new JLabel( "Searching products" );
		addPanel.add( header );
		searchPanel.add( searchHead );

		JPanel typePanel = new JPanel();
		JLabel typeLabel = new JLabel( "Type" );
		typePanel.add( typeLabel );
		JComboBox typeList = new JComboBox( typeVal );
		typePanel.add( typeList );
		typeList.addActionListener( new cbListener() );
		addPanel.add( typePanel );

		JPanel productPanel = new JPanel();
		JLabel productLabel = new JLabel( "ProductID" );
		productPanel.add( productLabel );
		JTextField productID = new JTextField( 6 );
		productPanel.add( productID );
		addPanel.add( productPanel );
		
		//a component can only be linked to one parent, so I had to make multiple components such as productid to be used on the add and search pages
		JPanel productPanel2 = new JPanel();
		JLabel productLabel2 = new JLabel( "ProductID" );
		productPanel2.add( productLabel2 );
		JTextField productID2 = new JTextField( 6 );
		productPanel2.add( productID2 );
		searchPanel.add( productPanel2 );

		fieldList.add( productID );
		searchList.add( productID2 );
		
		JPanel desPanel = new JPanel();
		JLabel desLabel = new JLabel( "Description" );
		desPanel.add( desLabel );
		JTextField description = new JTextField( 20 );
		desPanel.add( description );
		addPanel.add( desPanel );

		JPanel desPanel2 = new JPanel();
		JLabel desLabel2 = new JLabel( "Description" );
		desPanel2.add( desLabel2 );
		JTextField description2 = new JTextField( 20 );
		desPanel2.add( description2 );
		searchPanel.add( desPanel2 );

		fieldList.add( description );
		searchList.add( description2 );

		JPanel pricePanel = new JPanel();
		JLabel priceLabel = new JLabel( "Price" );
		pricePanel.add( priceLabel );
		JTextField price = new JTextField( 5 );
		pricePanel.add( price );
		addPanel.add( pricePanel );
		fieldList.add( price );

		JPanel yearPanel = new JPanel();
		JLabel yearLabel = new JLabel( "Year" );
		yearPanel.add( yearLabel );
		JTextField year = new JTextField( 4 );
		yearPanel.add( year );
		addPanel.add( yearPanel );
		fieldList.add( year );

		JPanel authorPanel = new JPanel();
		JLabel authorLabel = new JLabel( "Author" );
		authorPanel.add( authorLabel );
		JTextField author = new JTextField( 20 );
		authorPanel.add( author );
		bookPanel.add( authorPanel );
		fieldList.add( author );

		JPanel pubPanel = new JPanel();
		JLabel pubLabel = new JLabel( "Publishers" );
		pubPanel.add( pubLabel );
		JTextField publishers = new JTextField( 20 );
		pubPanel.add( publishers );
		bookPanel.add( pubPanel );
		fieldList.add( publishers );

		JPanel makerPanel = new JPanel();
		JLabel makerLabel = new JLabel( "Maker" );
		makerPanel.add( makerLabel );
		JTextField maker = new JTextField( 20 );
		makerPanel.add( maker );
		elecPanel.add( makerPanel );	
		fieldList.add( maker );

		JPanel startPanel = new JPanel();
		JLabel startLabel = new JLabel( "Start Year" );
		startPanel.add( startLabel );
		JTextField startYear = new JTextField( 4 );
		startPanel.add( startYear );
		searchPanel.add( startPanel );

		searchList.add( startYear );

		JPanel endPanel = new JPanel();
		JLabel endLabel = new JLabel( "End Year" );
		endPanel.add( endLabel );
		JTextField endYear = new JTextField( 4 );
		endPanel.add( endYear );
		searchPanel.add( endPanel );

		searchList.add( endYear );

		JButton reset = new JButton( "Reset" );	
		reset.addActionListener( new srListener() );	
		addRs.add( reset );
		JButton addData = new JButton( "Add" );
		addData.addActionListener( new srListener() );
		addRs.add( addData );

		JButton reset2 = new JButton( "Reset" );	
		reset2.addActionListener( new resetListener() );	
		searchRs.add( reset2 );
		JButton searchData = new JButton( "Search" );
		searchData.addActionListener( new srListener() );
		searchRs.add( searchData );

		addPanel.add( bookPanel );
		addPanel.add( elecPanel );

		JPanel errorPanel = new JPanel();
		JLabel errorLabel = new JLabel( "Messages" );
		errorPanel.add( errorLabel );	
		errorPanel.add( errorMes );
		JScrollPane scroll = new JScrollPane( errorMes );
		scroll.setHorizontalScrollBarPolicy( JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS );
		scroll.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
		errorPanel.add( scroll );

		addPanel.add( errorPanel );

		JPanel resultPanel = new JPanel();
		JLabel resultLabel = new JLabel( "Search Results" );
		resultPanel.add( resultLabel );	
		resultPanel.add( result );
		JScrollPane scroll2 = new JScrollPane( result );
		scroll2.setHorizontalScrollBarPolicy( JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS );
		scroll2.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
		resultPanel.add( scroll2 );

		searchPanel.add( resultPanel );

		addPanel.setLayout( new BoxLayout( addPanel, BoxLayout.Y_AXIS ) );
		addFormat.add( addPanel );
		addFormat.add( addRs );

		searchPanel.setLayout( new BoxLayout( searchPanel, BoxLayout.Y_AXIS ) );
		searchFormat.add( searchPanel );
		searchFormat.add( searchRs );
	
	}

	private class resetListener implements ActionListener {
		public void actionPerformed( ActionEvent e ) {
			String buttonString = e.getActionCommand();
			if( buttonString.equals( "Reset" ) ) {
				for( JTextField field: fieldList ) {
					field.setText( "" );
				}
			}
		}
	}

	private class srListener implements ActionListener {
		public void actionPerformed( ActionEvent e ) {
			//action listener for the reset, add, and search buttons
			String buttonString = e.getActionCommand();
			String productID = new String();
			String description = new String();
			int i;

			if( buttonString.equals( "Reset" ) ) {
				//sets all the text fields to "", so "resets" them
				for( JTextField field: fieldList ) {
					field.setText( "" );
				}
			}
			else if( buttonString.equals( "Add" ) ) {
				//if there are no errors with the inputs, add the product			
				int year = 0;
				String price = new String();
				String publisher = new String();
				String author = new String();
				String maker = new String();
				String temp = new String();

				boolean loop = true;
				String taString = new String();

				productID = fieldList.get(0).getText();
				description = fieldList.get(1).getText();
				temp = fieldList.get(3).getText();
				price = fieldList.get(2).getText();

				errorMes.setText( "" );

				if( ID( productID ) == false ) {
					errorMes.append( "The product ID entered is invalid. Must be a 6 digit number.\n" );
				}
				if( existingID( productID, product ) == true ) {
					errorMes.append( "A product with that ID already exists.\n" );
				}
				if( addDes( description ) == false ) {
					errorMes.append( "Description is a required field.\n" );
				}
				try {
					year = Integer.parseInt( temp );
				}
				catch( NumberFormatException f ) {
					errorMes.append( "The year entered is not a number.\n" );	
				}
				if( addYear( year ) == false ) {
					errorMes.append( "The year entered is not within the range (1000-9999).\n" );
				}

				if( isBook == true ) {
					author = fieldList.get(4).getText();
					publisher = fieldList.get(5).getText();
				}	
				else {
					maker = fieldList.get(4).getText();
				}
				taString = errorMes.getText();
				if( taString.length() == 0 ) {
					hm = addHm( product, hm, description );
					if( isBook == true ) {
						Book p = new Book( productID, description, year, price, author, publisher );
						product.add( p );
					}
					else {
						Electronics p = new Electronics( productID, description, year, price, maker );
						product.add( p );
					}
				}
			}
			else {
				//search for the appropriate product(s)
				int startYear = 1000;
				int endYear = 9999;
				Product p;
				String temp;

				productID = searchList.get(0).getText();
				description = searchList.get(1).getText();
				temp = searchList.get(2).getText();

				result.setText( "" );

				if( productID.isEmpty() == false || ID( productID ) == true ) {
					if( existingID( productID, product ) == true ) {
						for( i=0; i < product.size(); i++ ) {
							p = product.get(i);
							if( p.getID().equals( productID ) ) {											result.append( p.toString() + "\n" );
							}
						}
					}
				}
				else {
					if( description.isEmpty() == false ) {
						index = checkMatch( product, hm, description );
						try {
							startYear = Integer.parseInt( temp );
						}
						catch( NumberFormatException f ) {
						}
						temp = searchList.get(3).getText();
						try {
							endYear = Integer.parseInt( temp );
						}
						catch( NumberFormatException f ) {
						}
						for( i=0; i < index.size(); i++ ) {
							p = product.get(i);
							if( p.getYear() <= endYear && p.getYear() >= startYear ) {
								result.append( p.toString() + "\n" );
							}
						}
					}
					else {
						try {
							startYear = Integer.parseInt( temp );
						}
						catch( NumberFormatException f ) {
						}
						temp = searchList.get(3).getText();
						try {
							endYear = Integer.parseInt( temp );
						}
						catch( NumberFormatException f ) {
						}
						for( i=0; i < product.size(); i++ ) {
							p = product.get(i);
							if( p.getYear() <= endYear && p.getYear() >= startYear ) {
								result.append( p.toString() + "\n" );
							}

						}
					}	
				}
				
			}
		}
	}

	private class cbListener implements ActionListener {
		//combo box action listener
		public void actionPerformed( ActionEvent e ) {
			JComboBox cb = (JComboBox)e.getSource();
			String typeChoice = (String)cb.getSelectedItem();

			if( typeChoice.equals( "Electronics" ) ) {
				isBook = false;
				bookPanel.setVisible( false );
				elecPanel.setVisible( true );
		
			}
			else {
				isBook = true;
				bookPanel.setVisible( true );
				elecPanel.setVisible( false );
			}

		}
	}

	public void actionPerformed( ActionEvent e ) {
		//menu action listener
		String buttonString = e.getActionCommand();

		if( buttonString.equals( "Add" ) ) {
			getContentPane().removeAll();
			getContentPane().add( BorderLayout.WEST, addFormat );
			intro.setVisible( false );
			searchFormat.setVisible( false );
			addFormat.setVisible( true );
			elecPanel.setVisible( false );		
		}
		else if( buttonString.equals( "Search" ) ) {
			getContentPane().removeAll();
			getContentPane().add( BorderLayout.WEST, searchFormat );
			intro.setVisible( false );
			addFormat.setVisible( false );
			searchFormat.setVisible( true );
		}
		else if( buttonString.equals( "Exit" ) ) {
			System.exit( 0 );
		}
		else {
			System.out.println( "Unexpected error." );
		}
	}

	public static boolean ID( String input ) {
		//checks if productID is a 6 digit number

		if( input.length() != 6 || input.matches( "[0-9]+" ) == false ) {
			return false;
		}

		return true;
	}

	public static boolean existingID( String productID, ArrayList<Product> product ) {
		//checks for existing productID in the product ArrayList

		for( int i=0; i < product.size(); i++ ) {
			
			Product temp = product.get(i);
			if( temp.getID().equals( productID ) ) {
				return true ;
			}
		}

		return false;

	}

	public static boolean addDes( String input ) {
		//checks if description is empty
		
		if( input.length() < 1 ) {
			return false;
		}

		return true;
	}

	public static HashMap<String, ArrayList<Integer>> addHm( ArrayList<Product> product, HashMap<String, ArrayList<Integer>> hm, String description ) {
		//adds word to hashmap
		String[] arr;
		ArrayList<Integer> temp = new ArrayList<Integer>();

		arr = description.toLowerCase().split( " " );
		for( int i=0; i < arr.length; i++ ) {

			if( hm.containsKey( arr[i] ) == true ) {
				temp = hm.get( arr[i] );
				temp.add( product.size() );
			}
			else {
				temp.add( new Integer( product.size() ) );
			}
			hm.put( arr[i], temp );
		}

		return hm;
	}

	public static ArrayList<Integer> checkMatch( ArrayList<Product> product, HashMap<String, ArrayList<Integer>> hm, String description ) {
		//checks for a match between description words and words in the hashmap
		ArrayList<Integer> index = new ArrayList<>();
		ArrayList<Integer> temp = new ArrayList<>();
		String[] words;
		boolean match;

		words = description.split( " " );

		for( int i=0; i < words.length; i++ ) {
			if( index.isEmpty() ) {
				index = hm.get( words[i] );
			}
			else {
				temp = hm.get( words[i] );
				for( int j=0; j < index.size(); j++ ) {
					match = false;
					for( int k=0; k < temp.size(); k++ ) {
						if( index.get(j).equals( temp.get(k) ) ) {
							match = true;
						}
					}
					if( match == false ) {
						index.remove( j-1 );
					}	
				}
			}
		}	
		return index;
	}

	public static boolean addYear( int year ) {
		//checks if year inputted is within range
		if( year < 1000 | year > 9999 ) {
			return false;
		}
		
		return true;
	}

	public static void main( String[] args ) {

		App gui = new App();
		gui.setVisible( true );
	}
}
